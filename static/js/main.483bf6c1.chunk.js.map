{"version":3,"sources":["context/TodoContext.js","components/InputForm.jsx","components/TodoBar.jsx","components/TodoWrap.jsx","App.js","reportWebVitals.js","index.js"],"names":["TodoContext","createContext","TodoProvider","props","useState","search","setSearch","query","setQuery","val","done","todolist","setTodolist","filterTodo","setFilterTodo","useEffect","addTodo","newtodo","contain","Array","from","forEach","obj","alert","newObj","Provider","value","src","quer","tdl","add","delete","oldtodo","filter","e","getSrc","preventDefault","update","target","children","InputFrom","passObj","useContext","onUpdate","getSearch","className","type","onChange","onClick","name","id","TodoBar","todotext","isDone","check","setCheck","disappear","setDisappear","onAnimationEnd","todo","TodoWrap","filterObj","map","filteredtodo","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.483bf6c1.chunk.js","sourcesContent":["import React, { useState, useEffect, createContext } from 'react';\r\n\r\nexport const TodoContext = createContext();\r\n\r\nexport const TodoProvider = (props) => {\r\n\r\n    const [search, setSearch] = useState('');\r\n    const [query, setQuery] = useState('');\r\n    const [todolist, setTodolist] = useState([{\r\n        val:'Code',\r\n        done:false\r\n    }]);\r\n    const [filterTodo, setFilterTodo] = useState('All'); \r\n\r\n    useEffect(() => {\r\n        if(query !== null && query !== ''){\r\n            addTodo(query);\r\n            setSearch('');\r\n        }\r\n    }, [query]);\r\n\r\n\r\n    const updateSearch = e => {\r\n        setSearch(e.target.value);\r\n    }\r\n\r\n\r\n    const getSearch = e => {\r\n        e.preventDefault();\r\n        setQuery(search);\r\n        setSearch(null);\r\n    }\r\n\r\n\r\n    const addTodo = newtodo => {\r\n        let contain = false;\r\n        Array.from(todolist).forEach(obj => {\r\n            if(obj.val === newtodo){\r\n                contain = true;\r\n            }\r\n        });\r\n        if(contain){\r\n            alert('data sudah ada');\r\n        }else{\r\n            let newObj = {\r\n                val:newtodo,\r\n                done:false\r\n            }\r\n            setTodolist([...todolist, newObj]);\r\n        }\r\n    }\r\n\r\n\r\n    const deleteTodo = oldtodo => {\r\n        setTodolist(todolist.filter(e => e !== oldtodo));\r\n    }\r\n\r\n\r\n    return (\r\n        <TodoContext.Provider \r\n            value={{\r\n                src:[search, setSearch],\r\n                quer:[query, setQuery],\r\n                tdl:[todolist, setTodolist],\r\n                add:addTodo,\r\n                delete:deleteTodo,\r\n                getSrc:getSearch,\r\n                update:updateSearch,\r\n                filterTodo:[filterTodo, setFilterTodo]\r\n                \r\n            }}\r\n        >\r\n            {props.children}\r\n        </TodoContext.Provider>\r\n    );\r\n}\r\n\r\n","import React, { useState, useEffect, useContext } from 'react';\r\nimport { TodoContext } from '../context/TodoContext';\r\n\r\nconst InputFrom = () => {\r\n\r\n    const passObj = useContext(TodoContext);\r\n    const [search, setSearch] = passObj.src;\r\n    const onUpdate = passObj.update;\r\n    const getSearch = passObj.getSrc;\r\n    const [filterTodo, setFilterTodo] = passObj.filterTodo;\r\n\r\n    const selectFilter = e => {\r\n        setFilterTodo(e.target.value);\r\n    }\r\n\r\n    \r\n\r\n    return (\r\n        <form className=\"inputForm\">\r\n            <div className=\"inputWrap\">\r\n                <div className=\"addTodo\">\r\n                    <input type=\"text\" onChange={onUpdate} value={search} />\r\n                    <button onClick={getSearch} > + </button>\r\n                </div>\r\n                <select onChange={selectFilter}  name=\"filter\" id=\"select-filter\">\r\n                    <option value=\"All\">All</option>\r\n                    <option value=\"Done\">Done</option>\r\n                    <option value=\"Not Done\">Not Done</option>\r\n                </select>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default InputFrom;\r\n","import React,{ useState, useContext } from 'react';\r\nimport { TodoContext } from '../context/TodoContext';\r\n\r\nconst TodoBar = ({ todotext, isDone }) => {\r\n\r\n    const passObj = useContext(TodoContext);\r\n\r\n    const [todolist, setTodolist] = passObj.tdl;\r\n\r\n    const [check, setCheck] = useState(false);\r\n\r\n    const [disappear, setDisappear] = useState(false);\r\n\r\n    const onDone = () => {\r\n        Array.from(todolist).forEach(todo => {\r\n            if(todo.val === todotext){\r\n                todo.done = true;\r\n            } // jika todo.val sama dengan todo.done maka done akan true\r\n        });\r\n        setCheck(true);\r\n    }\r\n\r\n    const onDelete = () => {\r\n        setTodolist(Array.from(todolist).filter(obj => obj.val !== todotext));\r\n    }\r\n\r\n    const remove = () => {\r\n        setDisappear(true);\r\n    }\r\n\r\n    const grc = () =>{//generate random color\r\n        let r = Math.floor(Math.random() * 250);\r\n        let g = Math.floor(Math.random() * 250);\r\n        let b = Math.floor(Math.random() * 250);\r\n        return `rgb(${r}, ${g}, ${b})`;\r\n    }\r\n\r\n    return (\r\n        <div\r\n            // style={{\r\n            //     backgroundImage: `linear-gradient(to right, ${grc()}, ${grc()})`\r\n            //     // backgroundImage:`linear-gradient(to right, ${grc}, ${grc})`\r\n            // }}\r\n            className={`todobar ${disappear && 'remove'}`} onAnimationEnd={onDelete}\r\n        >\r\n            <div className={`divtext ${check && 'done' || isDone  && 'done'}`}><h4>{todotext}</h4></div>\r\n            <div className=\"button-div\">\r\n                <button onClick={onDone}>‚úîÔ∏è</button>\r\n                <button onClick={remove}>üóëÔ∏è</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TodoBar;\r\n","import React, { useState, useContext } from 'react';\r\nimport '../style/TodoWrap.css';\r\nimport { TodoContext } from '../context/TodoContext';\r\n\r\n//Import Component\r\nimport InputFrom from './InputForm';\r\nimport TodoBar from './TodoBar';\r\n\r\nconst TodoWrap = () => {\r\n\r\n    const passObj = useContext(TodoContext);\r\n    const [todolist, setTodolist] = passObj.tdl;\r\n    const [filterTodo, setFilterTodo] = passObj.filterTodo;\r\n\r\n    const filterObj = {\r\n        'All':(done) => {\r\n            return done | true;\r\n        },\r\n        'Done': (done) => {\r\n            return done;\r\n        },\r\n        'Not Done':(done) => {\r\n            return done ^ true;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"todoWrap\">\r\n            <h1>Todo List</h1>\r\n            <InputFrom />\r\n            <div className=\"barWrap\">\r\n                {\r\n                    todolist.filter(todo => filterObj[filterTodo](todo.done)).map(filteredtodo => (\r\n                        <TodoBar  todotext={filteredtodo.val} isDone={filteredtodo.done} />\r\n                    ))\r\n                }\r\n                \r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default TodoWrap;\r\n\r\n\r\n//npm git remote add origin","import './App.css';\nimport { CobaProvider } from './context/CobaContext';\nimport { TodoProvider } from './context/TodoContext';\n\n//Import component\nimport TodoWrap from './components/TodoWrap';\n\nconst App = () => {\n  return (\n    \n    <TodoProvider>\n      <div>\n        <TodoWrap />\n      </div>\n    </TodoProvider>\n    \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}